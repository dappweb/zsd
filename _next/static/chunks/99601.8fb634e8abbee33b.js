"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[99601],{21096:function(t,a,r){r.d(a,{C:function(){return e}});class e{overrideNextTransaction(t){this.contractWrapper.withTransactionOverride(t)}constructor(t){this.contractWrapper=t}}},69953:function(t,a,r){r.d(a,{D:function(){return T},E:function(){return D},a:function(){return k}});var e=r(61501),i=r(46347),n=r(99790),s=r(60105),o=r(83531),c=r(89586),p=r(11454),l=r(13545),h=r(73853),d=r(21325),u=r(30248),m=r(51445),g=r(50144),f=r.n(g),y=r(23198),W=r(12158),w=r(45094),C=r(78680),b=r(15418);class T{async getActive(t,a){let r=await this.get(t),e=await this.metadata.get();return await (0,y.y)(r,0,this.contractWrapper.getProvider(),e.merkle,this.storage,(null==a?void 0:a.withAllowList)||!1)}async get(t,a){if(this.isLegacySinglePhaseDrop(this.contractWrapper)){let a=await this.contractWrapper.read("claimCondition",[t]);return(0,y.z)(a)}if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){let r=void 0!==a?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return(0,y.z)(e)}if(this.isNewSinglePhaseDrop(this.contractWrapper)){let a=await this.contractWrapper.read("claimCondition",[t]);return(0,y.A)(a)}if(this.isNewMultiphaseDrop(this.contractWrapper)){let r=void 0!==a?a:await this.contractWrapper.read("getActiveClaimConditionId",[t]),e=await this.contractWrapper.read("getClaimConditionById",[t,r]);return(0,y.A)(e)}throw Error("Contract does not support claim conditions")}async getAll(t,a){if(!(this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)))return[await this.getActive(t,a)];{let r=await this.contractWrapper.read("claimCondition",[t]),e=r.currentStartId.toNumber(),i=r.count.toNumber(),n=[];for(let a=e;a<e+i;a++)n.push(await this.get(t,a));let s=await this.metadata.get();return Promise.all(n.map(t=>(0,y.y)(t,0,this.contractWrapper.getProvider(),s.merkle,this.storage,(null==a?void 0:a.withAllowList)||!1)))}}async canClaim(t,a,r){return r&&(r=await (0,c.aL)(r)),0===(await this.getClaimIneligibilityReasons(t,a,r)).length}async getClaimIneligibilityReasons(t,a,s){let o,p;let l=[];if(void 0===s)try{s=await this.contractWrapper.getSignerAddress()}catch(t){console.warn("failed to get signer address",t)}if(!s)return[y.C.NoWallet];let h=await (0,c.aL)(s);try{p=await this.getActive(t)}catch(t){if((0,c.B)(t,"!CONDITION")||(0,c.B)(t,"no active mint condition")||(0,c.B)(t,"DropNoActiveCondition"))return l.push(y.C.NoClaimConditionSet),l;return l.push(y.C.Unknown),l}if("unlimited"!==p.availableSupply&&e.O$.from(p.availableSupply).lt(a))return l.push(y.C.NotEnoughSupply),l;let d=i.stripZeros(p.merkleRootHash).length>0,u=null;if(d){if(!(u=await this.getClaimerProofs(t,h))&&(this.isLegacySinglePhaseDrop(this.contractWrapper)||this.isLegacyMultiPhaseDrop(this.contractWrapper)))return l.push(y.C.AddressNotAllowed),l;if(u)try{let r;let e=await this.prepareClaim(t,a,!1,h);if(this.isLegacyMultiPhaseDrop(this.contractWrapper)){if(o=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[r]=await this.contractWrapper.read("verifyClaimMerkleProof",[o,h,t,a,e.proofs,e.maxClaimable]),!r)return l.push(y.C.AddressNotAllowed),l}else if(this.isLegacySinglePhaseDrop(this.contractWrapper)){if([r]=await this.contractWrapper.read("verifyClaimMerkleProof",[t,h,a,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable}]),!r)return l.push(y.C.AddressNotAllowed),l}else this.isNewSinglePhaseDrop(this.contractWrapper)?await this.contractWrapper.read("verifyClaim",[t,h,a,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,currency:e.currencyAddressInProof,pricePerToken:e.priceInProof}]):this.isNewMultiphaseDrop(this.contractWrapper)&&(o=await this.contractWrapper.read("getActiveClaimConditionId",[t]),await this.contractWrapper.read("verifyClaim",[o,h,t,a,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,currency:e.currencyAddressInProof,pricePerToken:e.priceInProof}]))}catch(t){switch(console.warn("Merkle proof verification failed:","reason"in t?t.reason||t.errorName:t),t.reason||t.errorName){case"!Qty":case"DropClaimExceedLimit":l.push(y.C.OverMaxClaimablePerWallet);break;case"!PriceOrCurrency":case"DropClaimInvalidTokenPrice":l.push(y.C.WrongPriceOrCurrency);break;case"!MaxSupply":case"DropClaimExceedMaxSupply":l.push(y.C.NotEnoughSupply);break;case"cant claim yet":case"DropClaimNotStarted":l.push(y.C.ClaimPhaseNotStarted);break;default:l.push(y.C.AddressNotAllowed)}return l}}if(this.isNewSinglePhaseDrop(this.contractWrapper)||this.isNewMultiphaseDrop(this.contractWrapper)){let r=e.O$.from(0),i=(0,y.D)(p.maxClaimablePerWallet,0);try{r=await this.getSupplyClaimedByWallet(t,h)}catch(t){}if(u&&(i=(0,y.D)(u.maxClaimable,0)),i.gt(0)&&i.lt(r.add(a)))return l.push(y.C.OverMaxClaimablePerWallet),l;if((!d||d&&!u)&&(i.lte(r)||i.eq(0)))return l.push(y.C.AddressNotAllowed),l}let[m,g]=[e.O$.from(0),e.O$.from(0)];this.isLegacyMultiPhaseDrop(this.contractWrapper)?(o=await this.contractWrapper.read("getActiveClaimConditionId",[t]),[m,g]=await this.contractWrapper.read("getClaimTimestamp",[t,o,h])):this.isLegacySinglePhaseDrop(this.contractWrapper)&&([m,g]=await this.contractWrapper.read("getClaimTimestamp",[t,h]));let f=e.O$.from(Date.now()).div(1e3);if(m.gt(0)&&f.lt(g))return g.eq(n.Bz)?l.push(y.C.AlreadyClaimed):l.push(y.C.WaitBeforeNextClaimTransaction),l;if(p.price.gt(0)&&(0,c.d8)()){let t=p.price.mul(a),e=this.contractWrapper.getProvider();if((0,W.i)(p.currencyAddress))(await e.getBalance(h)).lt(t)&&l.push(y.C.NotEnoughTokens);else{let a=(await Promise.resolve().then(r.t.bind(r,54497,19))).default,i=new c.cs(e,p.currencyAddress,a,{},this.storage);(await i.read("balanceOf",[h])).lt(t)&&l.push(y.C.NotEnoughTokens)}}return l}async getClaimerProofs(t,a,r){let e=(await this.get(t,r)).merkleRoot;if(!(i.stripZeros(e).length>0))return null;{let t=await this.metadata.get(),r=await (0,c.aL)(a);return await (0,y.f)(r,e.toString(),t.merkle,this.contractWrapper.getProvider(),this.storage,this.getSnapshotFormatVersion())}}async getSupplyClaimedByWallet(t,a){let r=await (0,c.aL)(a);if(this.isNewSinglePhaseDrop(this.contractWrapper))return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,r]);if(this.isNewMultiphaseDrop(this.contractWrapper)){let a=await this.contractWrapper.read("getActiveClaimConditionId",[t]);return await this.contractWrapper.read("getSupplyClaimedByWallet",[t,a,r])}throw Error("This contract does not support the getSupplyClaimedByWallet function")}async prepareClaim(t,a,r,e){let i=await (0,c.aL)(e||await this.contractWrapper.getSignerAddress());return(0,y.E)(i,a,await this.getActive(t),async()=>(await this.metadata.get()).merkle,0,this.contractWrapper,this.storage,r,this.getSnapshotFormatVersion())}async getClaimArguments(t,a,r,e){let i=await (0,c.aL)(a);return this.isLegacyMultiPhaseDrop(this.contractWrapper)?[i,t,r,e.currencyAddress,e.price,e.proofs,e.maxClaimable]:this.isLegacySinglePhaseDrop(this.contractWrapper)?[i,t,r,e.currencyAddress,e.price,{proof:e.proofs,maxQuantityInAllowlist:e.maxClaimable},s.Y0("")]:[i,t,r,e.currencyAddress,e.price,{proof:e.proofs,quantityLimitPerWallet:e.maxClaimable,pricePerToken:e.priceInProof,currency:e.currencyAddressInProof},s.Y0("")]}async getClaimTransaction(t,a,r,e){if(null==e?void 0:e.pricePerToken)throw Error("Price per token should be set via claim conditions by calling `contract.erc1155.claimConditions.set()`");let i=await this.prepareClaim(a,r,(null==e?void 0:e.checkERC20Allowance)||!0);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:await this.getClaimArguments(a,t,r,i),overrides:i.overrides})}isNewSinglePhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimConditionsV2")}isNewMultiphaseDrop(t){return(0,l.d)(t,"ERC1155ClaimPhasesV2")}isLegacySinglePhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimConditionsV1")}isLegacyMultiPhaseDrop(t){return(0,l.d)(t,"ERC1155ClaimPhasesV1")}getSnapshotFormatVersion(){return this.isLegacyMultiPhaseDrop(this.contractWrapper)||this.isLegacySinglePhaseDrop(this.contractWrapper)?y.F.V1:y.F.V2}constructor(t,a,r){this.set=(0,d.f)((()=>{var t=this;return async function(a,r){let e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return t.setBatch.prepare([{tokenId:a,claimConditions:r}],e)}})()),this.setBatch=(0,d.f)((()=>{var t=this;return async function(a){let r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e={},n=await Promise.all(a.map(async a=>{let{tokenId:n,claimConditions:s}=a,c=s;if(t.isLegacySinglePhaseDrop(t.contractWrapper)){if(r=!0,0===s.length)c=[{startTime:new Date(0),currencyAddress:o.d,price:0,maxClaimableSupply:0,maxClaimablePerWallet:0,waitInSeconds:0,merkleRootHash:i.hexZeroPad([0],32),snapshot:[]}];else if(s.length>1)throw Error("Single phase drop contract cannot have multiple claim conditions, only one is allowed")}(t.isNewSinglePhaseDrop(t.contractWrapper)||t.isNewMultiphaseDrop(t.contractWrapper))&&c.forEach(t=>{var a;if(t.snapshot&&t.snapshot.length>0&&(void 0===t.maxClaimablePerWallet||"unlimited"===t.maxClaimablePerWallet))throw Error("maxClaimablePerWallet must be set to a specific value when an allowlist is set.\nSet it to 0 to only allow addresses in the allowlist to claim the amount specified in the allowlist.\n\nex:\ncontract.claimConditions.set(tokenId, [{ snapshot: [{ address: '0x...', maxClaimable: 1 }], maxClaimablePerWallet: 0 }])");if(t.snapshot&&t.snapshot.length>0&&(null===(a=t.maxClaimablePerWallet)||void 0===a?void 0:a.toString())==="0"&&0===t.snapshot.map(t=>{var a;return"string"==typeof t?0:Number((null===(a=t.maxClaimable)||void 0===a?void 0:a.toString())||0)}).reduce((t,a)=>t+a,0))throw Error("maxClaimablePerWallet is set to 0, and all addresses in the allowlist have max claimable 0. This means that no one can claim.")});let{snapshotInfos:p,sortedConditions:l}=await (0,y.H)(c,0,t.contractWrapper.getProvider(),t.storage,t.getSnapshotFormatVersion());return p.forEach(t=>{e[t.merkleRoot]=t.snapshotUri}),{tokenId:n,sortedConditions:l}})),s=await t.metadata.get(),c=[];for(let t of Object.keys(s.merkle||{}))e[t]=s.merkle[t];if(!f()(s.merkle,e)){let a=await t.metadata.parseInputMetadata({...s,merkle:e}),r=await t.metadata._parseAndUploadMetadata(a);if((0,l.h)("setContractURI",t.contractWrapper)){let a=new W.C(t.contractWrapper);c.push(a.encode("setContractURI",[r]))}else throw Error("Setting a merkle root requires implementing ContractMetadata in your contract to support storing a merkle root.")}if(n.forEach(a=>{let{tokenId:e,sortedConditions:i}=a,n=new W.C(t.contractWrapper);if(t.isLegacySinglePhaseDrop(t.contractWrapper)){let a=new W.C(t.contractWrapper);c.push(a.encode("setClaimConditions",[e,(0,y.I)(i[0]),r]))}else if(t.isLegacyMultiPhaseDrop(t.contractWrapper))c.push(n.encode("setClaimConditions",[e,i.map(y.I),r]));else if(t.isNewSinglePhaseDrop(t.contractWrapper))c.push(n.encode("setClaimConditions",[e,(0,y.J)(i[0]),r]));else if(t.isNewMultiphaseDrop(t.contractWrapper))c.push(n.encode("setClaimConditions",[e,i.map(y.J),r]));else throw Error("Contract does not support claim conditions")}),(0,l.h)("multicall",t.contractWrapper))return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[c]});throw Error("Contract does not support multicall")}})()),this.update=(0,d.f)(async(t,a,r)=>{let e=await this.getAll(t),i=await (0,y.K)(a,r,e);return await this.set.prepare(t,i)}),this.storage=r,this.contractWrapper=t,this.metadata=a}}let v=u.z.object({address:c.b9,quantity:c.cw.default(1)}),S=u.z.union([u.z.array(u.z.string()).transform(async t=>await Promise.all(t.map(t=>v.parseAsync({address:t})))),u.z.array(v)]);class P{async getClaimTransaction(t,a,r,e){let i={};return e&&e.pricePerToken&&(i=await (0,m.c)(this.contractWrapper,e.pricePerToken,r,e.currencyAddress,e.checkERC20Allowance)),d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[await (0,c.aL)(t),a,r],overrides:i})}constructor(t){this.featureName=c.d9.name,this.to=(0,d.f)(async(t,a,r,e)=>await this.getClaimTransaction(t,a,r,e)),this.contractWrapper=t}}class M{constructor(t,a){this.featureName=c.da.name,this.to=(0,d.f)(async(t,a,r,e)=>await this.conditions.getClaimTransaction(t,a,r,e)),this.contractWrapper=t,this.storage=a;let r=new l.C(this.contractWrapper,c.bg,this.storage);this.conditions=new T(t,r,this.storage)}}class k{async verify(t){let a=t.payload,r=t.signature,e=await this.mapPayloadToContractStruct(a);return(await this.contractWrapper.read("verify",[e,r]))[0]}async generate(t){let a={...t,tokenId:n.Bz};return this.generateFromTokenId(a)}async generateFromTokenId(t){return(await this.generateBatchFromTokenIds([t]))[0]}async generateBatch(t){let a=t.map(t=>({...t,tokenId:n.Bz}));return this.generateBatchFromTokenIds(a)}async generateBatchFromTokenIds(t){var a;let r=this.contractWrapper.getSigner();(0,w.Z)(r,"No signer available"),await (null===(a=this.roles)||void 0===a?void 0:a.verify(["minter"],await r.getAddress()));let e=await Promise.all(t.map(t=>y.r.parseAsync(t))),i=e.map(t=>t.metadata),[n,s,o]=await Promise.all([(0,h.u)(i,this.storage),this.contractWrapper.getChainID(),(0,c.dc)(this.contractWrapper.address,this.contractWrapper.getProvider())]),p=await Promise.all(e.map((t,a)=>y.s.parseAsync({...t,uri:n[a]}))),l=await Promise.all(p.map(t=>this.mapPayloadToContractStruct(t))),d=(null==o?void 0:o.type)==="TokenERC1155";return(await Promise.all(l.map(t=>this.contractWrapper.signTypedData(r,{name:d?"TokenERC1155":"SignatureMintERC1155",version:"1",chainId:s,verifyingContract:this.contractWrapper.address},{MintRequest:y.w},t)))).map((t,a)=>({payload:p[a],signature:t.toString()}))}async mapPayloadToContractStruct(t){let a=await (0,C.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,tokenId:t.tokenId,uri:t.uri,quantity:t.quantity,pricePerToken:a,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}constructor(t,a,r){this.featureName=c.db.name,this.mint=(0,d.f)(async t=>{let a=t.payload,r=t.signature,[e,i]=await Promise.all([this.mapPayloadToContractStruct(a),this.contractWrapper.getCallOverrides()]);return await (0,b.s)(this.contractWrapper,e.pricePerToken.mul(e.quantity),a.currencyAddress,i),d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,r],overrides:i,parse:t=>{let a=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===a.length)throw Error("No MintWithSignature event found");return{id:a[0].args.tokenIdMinted,receipt:t}}})}),this.mintBatch=(0,d.f)(async t=>{let a=await Promise.all(t.map(t=>this.mapPayloadToContractStruct(t.payload))),r=t.map((t,r)=>{let i=a[r],n=t.signature,s=t.payload.price;if(e.O$.from(s).gt(0))throw Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:i,signature:n}}),i=new W.C(this.contractWrapper),n=r.map(t=>i.encode("mintWithSignature",[t.message,t.signature]));if((0,l.h)("multicall",this.contractWrapper))return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:t=>{let a=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===a.length)throw Error("No MintWithSignature event found");return a.map(a=>({id:a.args.tokenIdMinted,receipt:t}))}});throw Error("Multicall not supported on this contract!")}),this.contractWrapper=t,this.storage=a,this.roles=r}}class A{constructor(t){this.featureName=c.dd.name,this.tokens=(0,d.f)(async(t,a)=>{let r=await this.contractWrapper.getSignerAddress();return this.from.prepare(r,t,a)}),this.from=(0,d.f)(async(t,a,r)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await (0,c.aL)(t),a,r]})),this.batch=(0,d.f)(async(t,a)=>{let r=await this.contractWrapper.getSignerAddress();return this.batchFrom.prepare(r,t,a)}),this.batchFrom=(0,d.f)(async(t,a,r)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnBatch",args:[await (0,c.aL)(t),a,r]})),this.contractWrapper=t}}class E{async all(t){let a=e.O$.from((null==t?void 0:t.start)||0).toNumber(),r=e.O$.from((null==t?void 0:t.count)||h.D).toNumber(),i=Math.min((await this.totalCount()).toNumber(),a+r);return await Promise.all([...Array(i-a).keys()].map(t=>this.erc1155.get((a+t).toString())))}async totalCount(){return await this.contractWrapper.read("nextTokenIdToMint",[])}async totalCirculatingSupply(t){return await this.contractWrapper.read("totalSupply",[t])}async owned(t,a){let[r,e]=await Promise.all([(0,c.aL)(t||await this.contractWrapper.getSignerAddress()),this.contractWrapper.read("nextTokenIdToMint",[])]),i=(await this.contractWrapper.read("balanceOfBatch",[Array(e.toNumber()).fill(r),Array.from(Array(e.toNumber()).keys())])).map((t,a)=>({tokenId:a,balance:t})).filter(t=>t.balance.gt(0));if(a){let t=(null==a?void 0:a.start)||0,r=(null==a?void 0:a.count)||h.D;i=i.slice(t,t+r)}return(await Promise.all(i.map(t=>this.erc1155.get(t.tokenId.toString())))).map((t,a)=>({...t,owner:r,quantityOwned:i[a].balance.toString()}))}constructor(t,a){this.featureName=c.de.name,this.erc1155=t,this.contractWrapper=a}}class I{detectErc1155Revealable(){if((0,l.d)(this.contractWrapper,"ERC1155Revealable"))return new m.D(this.contractWrapper,this.storage,c.dg.name,()=>this.erc1155.nextTokenIdToMint())}isLegacyEditionDropContract(t,a){return a&&"DropERC1155"===a.type&&a.version<3||!1}constructor(t,a,r){this.featureName=c.df.name,this.lazyMint=(0,d.f)(async(t,a)=>{let r=await this.erc1155.nextTokenIdToMint(),e=await (0,h.u)(t,this.storage,r.toNumber(),a),i=e[0].substring(0,e[0].lastIndexOf("/"));for(let t=0;t<e.length;t++){let a=e[t].substring(0,e[t].lastIndexOf("/"));if(i!==a)throw Error("Can only create batches with the same base URI for every entry in the batch. Expected '".concat(i,"' but got '").concat(a,"'"))}let n=t=>{let a=this.contractWrapper.parseLogs("TokensLazyMinted",null==t?void 0:t.logs),r=a[0].args.startTokenId,e=a[0].args.endTokenId,i=[];for(let a=r;a.lte(e);a=a.add(1))i.push({id:a,receipt:t,data:()=>this.erc1155.getTokenMetadata(a)});return i},o=await (0,c.dc)(this.contractWrapper.address,this.contractWrapper.getProvider());return this.isLegacyEditionDropContract(this.contractWrapper,o)?d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,"".concat(i.endsWith("/")?i:"".concat(i,"/"))],parse:n}):d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,"".concat(i.endsWith("/")?i:"".concat(i,"/")),s.Y0("")],parse:n})}),this.updateMetadata=(0,d.f)(async(t,a,r)=>{let i=await this.contractWrapper.read("getBaseURICount",[]);if(i.eq(0))throw Error("No base URI set. Please set a base URI before updating metadata");let n=e.O$.from(t),s=e.O$.from(0),o=e.O$.from(0),c=0;for(let t=0;t<i.toNumber()&&(c=t,!(o=await this.contractWrapper.read("getBatchIdAtIndex",[c])).gt(n));t++)s=o;let p=Array.from({length:o.sub(s).toNumber()},(t,a)=>a+s.toNumber()),l=await Promise.all(p.map(t=>this.erc1155.getTokenMetadata(t))),u=[];for(let t=0;t<l.length;t++){let{id:r,uri:i,...s}=l[t];e.O$.from(n).eq(e.O$.from(r))?u.push(a):u.push(s)}let m=await (0,h.u)(u,this.storage,s.toNumber(),r),g=m[0].substring(0,m[0].lastIndexOf("/"));return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[c,"".concat(g.endsWith("/")?g:"".concat(g,"/"))]})}),this.erc1155=t,this.contractWrapper=a,this.storage=r,this.revealer=this.detectErc1155Revealable()}}class N{constructor(t,a,r){this.featureName=c.dh.name,this.to=(0,d.f)(async(t,a)=>{let r=a.map(t=>t.metadata),e=a.map(t=>t.supply),i=await (0,h.u)(r,this.storage),s=await (0,c.aL)(t),o=new W.C(this.contractWrapper),p=await Promise.all(i.map(async(t,a)=>o.encode("mintTo",[s,n.Bz,t,e[a]])));return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[p],parse:t=>{let a=this.contractWrapper.parseLogs("TokensMinted",t.logs);if(0===a.length||a.length<r.length)throw Error("TokenMinted event not found, minting failed");return a.map(a=>{let r=a.args.tokenIdMinted;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}})}})}),this.erc1155=t,this.contractWrapper=a,this.storage=r}}class L{async getMintTransaction(t,a){let r=await (0,h.b)(a.metadata,this.storage);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await (0,c.aL)(t),n.Bz,r,a.supply]})}detectErc1155BatchMintable(){if((0,l.d)(this.contractWrapper,"ERC1155BatchMintable"))return new N(this.erc1155,this.contractWrapper,this.storage)}constructor(t,a,r){this.featureName=c.di.name,this.to=(0,d.f)(async(t,a)=>{let r=await this.getMintTransaction(t,a);return r.setParse(t=>{let a=this.contractWrapper.parseLogs("TransferSingle",null==t?void 0:t.logs);if(0===a.length)throw Error("TransferSingleEvent event not found");let r=a[0].args.id;return{id:r,receipt:t,data:()=>this.erc1155.get(r.toString())}}),r}),this.additionalSupplyTo=(0,d.f)(async(t,a,r)=>{let i=await this.erc1155.getTokenMetadata(a);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[await (0,c.aL)(t),a,i.uri,r],parse:t=>({id:e.O$.from(a),receipt:t,data:()=>this.erc1155.get(a)})})}),this.erc1155=t,this.contractWrapper=a,this.storage=r,this.batch=this.detectErc1155BatchMintable()}}class D{get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){let[a,r]=await Promise.all([this.contractWrapper.read("totalSupply",[t]).catch(()=>e.O$.from(0)),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...h.F}))]);return{owner:o.d,metadata:r,type:"ERC1155",supply:a.toString()}}async totalSupply(t){if((0,l.d)(this.contractWrapper,"ERC1155Supply"))return await this.contractWrapper.read("totalSupply",[t]);throw new c.x(c.dk)}async balanceOf(t,a){return await this.contractWrapper.read("balanceOf",[await (0,c.aL)(t),a])}async balance(t){return await this.balanceOf(await this.contractWrapper.getSignerAddress(),t)}async isApproved(t,a){return await this.contractWrapper.read("isApprovedForAll",[await (0,c.aL)(t),await (0,c.aL)(a)])}async nextTokenIdToMint(){if((0,l.h)("nextTokenIdToMint",this.contractWrapper))return await this.contractWrapper.read("nextTokenIdToMint",[]);throw Error("Contract requires the `nextTokenIdToMint` function available to determine the next token ID to mint")}async getAll(t){return(0,p.a)(this.query,c.de).all(t)}async totalCount(){return(0,p.a)(this.query,c.de).totalCount()}async totalCirculatingSupply(t){return(0,p.a)(this.query,c.de).totalCirculatingSupply(t)}async getOwned(t,a){return t&&(t=await (0,c.aL)(t)),(0,p.a)(this.query,c.de).owned(t,a)}async getMintTransaction(t,a){return(0,p.a)(this.mintable,c.di).getMintTransaction(t,a)}async getClaimTransaction(t,a,r,e){let i=this.claimWithConditions,n=this.claimCustom;if(i)return i.conditions.getClaimTransaction(t,a,r,e);if(n)return n.getClaimTransaction(t,a,r,e);throw new c.x(c.d9)}get claimConditions(){return(0,p.a)(this.claimWithConditions,c.da).conditions}get signature(){return(0,p.a)(this.signatureMintable,c.db)}get revealer(){var t;return(0,p.a)(null===(t=this.lazyMintable)||void 0===t?void 0:t.revealer,c.dg)}async getTokenMetadata(t){let a=await this.contractWrapper.read("uri",[t]);if(!a)throw new c.n;return(0,h.f)(t,a,this.storage)}detectErc1155Enumerable(){if((0,l.d)(this.contractWrapper,"ERC1155Enumerable"))return new E(this,this.contractWrapper)}detectErc1155Mintable(){if((0,l.d)(this.contractWrapper,"ERC1155Mintable"))return new L(this,this.contractWrapper,this.storage)}detectErc1155Burnable(){if((0,l.d)(this.contractWrapper,"ERC1155Burnable"))return new A(this.contractWrapper)}detectErc1155LazyMintable(){if((0,l.d)(this.contractWrapper,"ERC1155LazyMintableV1")||(0,l.d)(this.contractWrapper,"ERC1155LazyMintableV2"))return new I(this,this.contractWrapper,this.storage)}detectErc1155SignatureMintable(){if((0,l.d)(this.contractWrapper,"ERC1155SignatureMintable"))return new k(this.contractWrapper,this.storage)}detectErc1155Claimable(){if((0,l.d)(this.contractWrapper,"ERC1155ClaimCustom"))return new P(this.contractWrapper)}detectErc1155ClaimableWithConditions(){if((0,l.d)(this.contractWrapper,"ERC1155ClaimConditionsV1")||(0,l.d)(this.contractWrapper,"ERC1155ClaimConditionsV2")||(0,l.d)(this.contractWrapper,"ERC1155ClaimPhasesV1")||(0,l.d)(this.contractWrapper,"ERC1155ClaimPhasesV2"))return new M(this.contractWrapper,this.storage)}constructor(t,a,r){this.featureName=c.dj.name,this.transfer=(0,d.f)((()=>{var t=this;return async function(a,r,e){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0],n=await t.contractWrapper.getSignerAddress();return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[n,await (0,c.aL)(a),r,e,i]})}})()),this.transferBatch=(0,d.f)((()=>{var t=this;return async function(a,r,e,i){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0],s=i?await (0,c.aL)(i):await t.contractWrapper.getSignerAddress();return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeBatchTransferFrom",args:[s,await (0,c.aL)(a),r,e,n]})}})()),this.transferFrom=(0,d.f)((()=>{var t=this;return async function(a,r,e,i){let n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0];return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"safeTransferFrom",args:[await (0,c.aL)(a),await (0,c.aL)(r),e,i,n]})}})()),this.setApprovalForAll=(0,d.f)(async(t,a)=>d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[t,a]})),this.airdrop=(0,d.f)((()=>{var t=this;return async function(a,r,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0],s=i?await (0,c.aL)(i):await t.contractWrapper.getSignerAddress(),o=await t.balanceOf(s,a),p=await S.parseAsync(r),l=p.reduce((t,a)=>e.O$.from(t).add(e.O$.from((null==a?void 0:a.quantity)||1)),e.O$.from(0));if(o.lt(e.O$.from(l)))throw Error("The caller owns ".concat(o.toString()," NFTs, but wants to airdrop ").concat(l.toString()," NFTs."));let h=new W.C(t.contractWrapper),u=p.map(t=>{let{address:r,quantity:e}=t;return h.encode("safeTransferFrom",[s,r,a,e,n])});return d.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"multicall",args:[u]})}})()),this.mint=(0,d.f)(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)),this.mintTo=(0,d.f)(async(t,a)=>(0,p.a)(this.mintable,c.di).to.prepare(t,a)),this.mintAdditionalSupply=(0,d.f)(async(t,a)=>(0,p.a)(this.mintable,c.di).additionalSupplyTo.prepare(await this.contractWrapper.getSignerAddress(),t,a)),this.mintAdditionalSupplyTo=(0,d.f)(async(t,a,r)=>(0,p.a)(this.mintable,c.di).additionalSupplyTo.prepare(t,a,r)),this.mintBatch=(0,d.f)(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t)),this.mintBatchTo=(0,d.f)(async(t,a)=>{var r;return(0,p.a)(null===(r=this.mintable)||void 0===r?void 0:r.batch,c.dh).to.prepare(t,a)}),this.burn=(0,d.f)(async(t,a)=>(0,p.a)(this.burnable,c.dd).tokens.prepare(t,a)),this.burnFrom=(0,d.f)(async(t,a,r)=>(0,p.a)(this.burnable,c.dd).from.prepare(t,a,r)),this.burnBatch=(0,d.f)(async(t,a)=>(0,p.a)(this.burnable,c.dd).batch.prepare(t,a)),this.burnBatchFrom=(0,d.f)(async(t,a,r)=>(0,p.a)(this.burnable,c.dd).batchFrom.prepare(t,a,r)),this.lazyMint=(0,d.f)(async(t,a)=>(0,p.a)(this.lazyMintable,c.df).lazyMint.prepare(t,a)),this.updateMetadata=(0,d.f)(async(t,a)=>{if(this.lazyMintable)return this.lazyMintable.updateMetadata.prepare(t,a);if((0,l.d)(this.contractWrapper,"ERC1155UpdatableMetadata")){let r=await this.storage.upload(a);return d.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,r]})}throw new c.x(c.dl)}),this.claim=(0,d.f)(async(t,a,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,a,r)),this.claimTo=(0,d.f)(async(t,a,r,e)=>{let i=this.claimWithConditions,n=this.claimCustom;if(i)return i.to.prepare(t,a,r,e);if(n)return n.to.prepare(t,a,r,e);throw new c.x(c.d9)}),this.contractWrapper=t,this.storage=a,this.query=this.detectErc1155Enumerable(),this.mintable=this.detectErc1155Mintable(),this.burnable=this.detectErc1155Burnable(),this.lazyMintable=this.detectErc1155LazyMintable(),this.signatureMintable=this.detectErc1155SignatureMintable(),this.claimCustom=this.detectErc1155Claimable(),this.claimWithConditions=this.detectErc1155ClaimableWithConditions(),this._chainId=r}}}}]);