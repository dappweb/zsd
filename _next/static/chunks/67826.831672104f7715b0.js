"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[67826],{67826:function(t,r,a){a.d(r,{E:function(){return U},a:function(){return z}});var e=a(73877),i=a(61501),n=a(60105),s=a(83531),c=a(35368),o=a(57289),p=a(89586),l=a(11454),h=a(13545),d=a(73853),u=a(21325),m=a(33676),g=a(51445),y=a(12158),W=a(75781),w=a(15418),f=a(45094),T=a(78680),C=a(30248),v=a(23198);class b{constructor(t){this.featureName=p.cL.name,this.token=(0,u.f)(async t=>u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[t]})),this.contractWrapper=t}}class S{constructor(t,r,a){this.featureName=p.cM.name,this.to=(0,u.f)(async(t,r,a)=>{let e=await this.conditions.getClaimTransaction(t,r,a);return e.setParse(t=>{let a=this.contractWrapper.parseLogs("TokensClaimed",null==t?void 0:t.logs)[0].args.startTokenId,e=a.add(r),i=[];for(let r=a;r.lt(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.get(r)});return i}),e}),this.erc721=t,this.contractWrapper=r,this.storage=a;let e=new h.C(this.contractWrapper,p.bg,this.storage);this.conditions=new m.D(this.contractWrapper,e,this.storage)}}class k{async getSaleDetails(){return this.contractWrapper.read("saleDetails",[])}constructor(t,r){this.featureName=p.cN.name,this.to=(0,u.f)(async(t,r,a)=>{var n;if(t!==await (null===(n=this.contractWrapper.getSigner())||void 0===n?void 0:n.getAddress()))throw Error("Zora Drop: Destination address must match connected wallet address");if(null==a?void 0:a.pricePerToken)throw Error("Zora Drop: Custom pricePerToken is not supported. Price is automatically calculated");let s=(await this.getSaleDetails()).publicSalePrice,c=e.parseEther(p.cw.parse("0.000777")),o=i.O$.from(s).add(c).mul(r),l=u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"purchase",args:[r],overrides:{value:o}});return l.setParse(t=>{let a=this.contractWrapper.parseLogs("Sale",null==t?void 0:t.logs)[0].args.firstPurchasedTokenId,e=a.add(r),i=[];for(let r=a;r.lt(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.get(r)});return i}),l}),this.erc721=t,this.contractWrapper=r}}class M{async getClaimTransaction(t,r,a){let e={};return a&&a.pricePerToken&&(e=await (0,g.c)(this.contractWrapper,a.pricePerToken,r,a.currencyAddress,a.checkERC20Allowance)),u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"claim",args:[t,r],overrides:e})}constructor(t,r){this.featureName=p.cO.name,this.to=(0,u.f)(async(t,r,a)=>{let e=await this.getClaimTransaction(t,r,a);return e.setParse(t=>{let a=this.contractWrapper.parseLogs("TokensClaimed",null==t?void 0:t.logs)[0].args.startTokenId,e=a.add(r),i=[];for(let r=a;r.lt(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.get(r)});return i}),e}),this.erc721=t,this.contractWrapper=r}}class E{detectErc721Revealable(){if((0,h.d)(this.contractWrapper,"ERC721Revealable"))return new g.D(this.contractWrapper,this.storage,p.cQ.name,()=>this.erc721.nextTokenIdToMint())}constructor(t,r,a){this.featureName=p.cP.name,this.lazyMint=(0,u.f)(async(t,r)=>{let a=await this.erc721.nextTokenIdToMint(),e=await (0,d.u)(t,this.storage,a.toNumber(),r),i=(0,d.g)(e);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[e.length,i.endsWith("/")?i:"".concat(i,"/"),n.Y0("")],parse:t=>{let r=this.contractWrapper.parseLogs("TokensLazyMinted",null==t?void 0:t.logs),a=r[0].args.startTokenId,e=r[0].args.endTokenId,i=[];for(let r=a;r.lte(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.getTokenMetadata(r)});return i}})}),this.updateMetadata=(0,u.f)(async(t,r,a)=>{let e=await this.contractWrapper.read("getBaseURICount",[]);if(e.eq(0))throw Error("No base URI set. Please set a base URI before updating metadata");let n=i.O$.from(t),s=i.O$.from(0),c=i.O$.from(0),o=0;for(let t=0;t<e.toNumber()&&(o=t,!(c=await this.contractWrapper.read("getBatchIdAtIndex",[o])).gt(n));t++)s=c;let p=Array.from({length:c.sub(s).toNumber()},(t,r)=>r+s.toNumber()),l=await Promise.all(p.map(t=>this.erc721.getTokenMetadata(t))),h=[];for(let t=0;t<l.length;t++){let{id:a,uri:e,...s}=l[t];i.O$.from(n).eq(i.O$.from(a))?h.push(r):h.push(s)}let m=await (0,d.u)(h,this.storage,s.toNumber(),a),g=m[0].substring(0,m[0].lastIndexOf("/"));return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateBatchBaseURI",args:[o,"".concat(g.endsWith("/")?g:"".concat(g,"/"))]})}),this.erc721=t,this.contractWrapper=r,this.storage=a,this.revealer=this.detectErc721Revealable()}}class I{constructor(t){this.featureName=p.cR.name,this.cancel=(0,u.f)(async t=>u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancel",args:[t]})),this.revoke=(0,u.f)(async t=>u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"revoke",args:[t]})),this.contractWrapper=t}}class P{constructor(t,r){this.featureName=p.cS.name,this.update=(0,u.f)(async(t,r)=>{let a=await (0,d.b)(r,this.storage);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setTokenURI",args:[t,a]})}),this.contractWrapper=t,this.storage=r}}class R{constructor(t,r,a){this.featureName=p.cT.name,this.to=(0,u.f)(async(t,r)=>{let[a,e]=await Promise.all([(0,d.u)(r,this.storage),(0,p.aL)(t)]),i=new y.C(this.contractWrapper),n=a.map(t=>i.encode("mintTo",[e,t]));return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:t=>{let a=this.contractWrapper.parseLogs("TokensMinted",t.logs);if(0===a.length||a.length<r.length)throw Error("TokenMinted event not found, minting failed");return a.map(r=>{let a=r.args.tokenIdMinted;return{id:a,receipt:t,data:()=>this.erc721.get(a)}})}})}),this.erc721=t,this.contractWrapper=r,this.storage=a}}class N{async getMintTransaction(t,r){return this.to.prepare(await (0,p.aL)(t),r)}detectErc721BatchMintable(){if((0,h.d)(this.contractWrapper,"ERC721BatchMintable"))return new R(this.erc721,this.contractWrapper,this.storage)}constructor(t,r,a){this.featureName=p.cU.name,this.to=(0,u.f)(async(t,r)=>{let[a,e]=await Promise.all([(0,d.b)(r,this.storage),(0,p.aL)(t)]);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:[e,a],parse:t=>{let r=this.contractWrapper.parseLogs("Transfer",null==t?void 0:t.logs);if(0===r.length)throw Error("TransferEvent event not found");let a=r[0].args.tokenId;return{id:a,receipt:t,data:()=>this.erc721.get(a)}}})}),this.erc721=t,this.contractWrapper=r,this.storage=a,this.batch=this.detectErc721BatchMintable()}}class L{async get(){let t=await this.contractWrapper.read("sharedMetadata",[]);if(!t.every(t=>""===t))return{name:t.name,description:t.description,image:t.imageURI,animation_url:t.animationURI}}sanitizeJSONString(t){if(!t)return t;let r=JSON.stringify(t);return r.slice(1,r.length-1)}constructor(t,r){this.featureName=p.cV.name,this.set=(0,u.f)(async t=>{let r=w.B.parse(t);r.description=this.sanitizeJSONString(r.description);let a=[];(0,W.XT)(r.image)?a.push(this.storage.upload(r.image)):"string"==typeof r.image?a.push(Promise.resolve(r.image)):a.push(Promise.resolve(void 0)),(0,W.XT)(r.animation_url)?a.push(this.storage.upload(r.animation_url)):"string"==typeof r.animation_url?a.push(Promise.resolve(r.animation_url)):a.push(Promise.resolve(void 0));let[e,i]=await Promise.all(a);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setSharedMetadata",args:[{name:"".concat(r.name||""),description:r.description||"",imageURI:e||"",animationURI:i||""}]})}),this.contractWrapper=t,this.storage=r}}class A{async all(t,r){let a=await this.tokenIds(t);if(r){let t=(null==r?void 0:r.start)||0,e=(null==r?void 0:r.count)||d.D;a=a.slice(t,t+e)}return await Promise.all(a.map(t=>this.erc721.get(t.toString())))}async tokenIds(t){let r=await (0,p.aL)(t||await this.contractWrapper.getSignerAddress()),a=Array.from(Array((await this.contractWrapper.read("balanceOf",[r])).toNumber()).keys());return await Promise.all(a.map(t=>this.contractWrapper.read("tokenOfOwnerByIndex",[r,t])))}constructor(t,r){this.featureName=p.cW.name,this.erc721=t,this.contractWrapper=r}}class O{async all(t,r){let a=await this.tokenIds(t);if(r){let t=(null==r?void 0:r.start)||0,e=(null==r?void 0:r.count)||d.D;a=a.slice(t,t+e)}return await Promise.all(a.map(t=>this.erc721.get(t.toString())))}async tokenIds(t){let r=await (0,p.aL)(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("tokensOfOwner",[r])}constructor(t,r){this.featureName=p.cX.name,this.erc721=t,this.contractWrapper=r}}class B{async all(t){let r=i.O$.from(0);(0,h.h)("startTokenId",this.contractWrapper)&&(r=await this.contractWrapper.read("startTokenId",[]));let a=i.O$.from((null==t?void 0:t.start)||0).add(r).toNumber(),e=i.O$.from((null==t?void 0:t.count)||d.D).toNumber(),n=Math.min((await this.erc721.nextTokenIdToMint()).add(r).toNumber(),a+e);return await Promise.all([...Array(n-a).keys()].map(t=>this.erc721.get((a+t).toString())))}async allOwners(t){let r;let a=i.O$.from(0);(0,h.h)("startTokenId",this.contractWrapper)&&(a=await this.contractWrapper.read("startTokenId",[]));try{r=await this.erc721.totalClaimedSupply()}catch(t){r=await this.totalCount()}let e=[...Array((r=r.add(a)).toNumber()).keys()];if(t){let r=(null==t?void 0:t.start)||0,a=(null==t?void 0:t.count)||d.D;e=e.slice(r,r+a)}let n=await Promise.all(e.map(t=>this.erc721.ownerOf(t).catch(()=>s.d)));return e.map(t=>({tokenId:t,owner:n[t]})).filter(t=>t.owner!==s.d)}async totalCount(){return await this.erc721.nextTokenIdToMint()}async totalCirculatingSupply(){return await this.contractWrapper.read("totalSupply",[])}detectErc721Owned(){return(0,h.d)(this.contractWrapper,"ERC721Enumerable")?new A(this.erc721,this.contractWrapper):(0,h.d)(this.contractWrapper,"ERC721AQueryable")?new O(this.erc721,this.contractWrapper):void 0}constructor(t,r){this.featureName=p.cY.name,this.erc721=t,this.contractWrapper=r,this.owned=this.detectErc721Owned()}}let D=v.B.extend({tierPriority:C.z.array(C.z.string()),royaltyRecipient:p.b9.default(s.d),royaltyBps:p.cC.default(0),quantity:p.b5.default(1)}),q=[{name:"validityStartTimestamp",type:"uint128"},{name:"validityEndTimestamp",type:"uint128"},{name:"uid",type:"bytes32"},{name:"data",type:"bytes"}];class x{async getMetadataInTier(t){let r=(await this.contractWrapper.read("getMetadataForAllTiers",[])).find(r=>r.tier===t);if(!r)throw Error("Tier not found in contract.");return await Promise.all(r.ranges.map((t,a)=>{let e=[],i=r.baseURIs[a];for(let r=t.startIdInclusive.toNumber();r<t.endIdNonInclusive.toNumber();r++){let t=i.endsWith("/")?"".concat(i).concat(r):"".concat(i,"/").concat(r),a=this.storage.downloadJSON(t);e.push(a)}return e}).flat())}async getTokensInTier(t){let r=await this.contractWrapper.read("getTokensInTierLen",[]);if(r.eq(0))return[];let a=await this.contractWrapper.read("getTokensInTier",[t,0,r]);return await Promise.all(a.map(t=>{let r=[];for(let a=t.startIdInclusive.toNumber();a<t.endIdNonInclusive.toNumber();a++)r.push(this.erc721.get(a));return r}).flat())}async generate(t){let[r]=await this.generateBatch([t]);return r}async generateBatch(t){let r=await Promise.all(t.map(t=>D.parseAsync(t))),a=await this.contractWrapper.getChainID(),e=this.contractWrapper.getSigner();return(0,f.Z)(e,"No signer available"),await Promise.all(r.map(async t=>{let r=await this.contractWrapper.signTypedData(e,{name:"SignatureAction",version:"1",chainId:a,verifyingContract:this.contractWrapper.address},{GenericRequest:q},await this.mapPayloadToContractStruct(t));return{payload:t,signature:r.toString()}}))}async verify(t){let r=await this.mapPayloadToContractStruct(t.payload);return(await this.contractWrapper.read("verify",[r,t.signature]))[0]}async claimWithSignature(t){let r=await this.mapPayloadToContractStruct(t.payload),a=await (0,T.n)(this.contractWrapper.getProvider(),t.payload.price,t.payload.currencyAddress),e=await this.contractWrapper.getCallOverrides();await (0,w.s)(this.contractWrapper,a,t.payload.currencyAddress,e);let i=await this.contractWrapper.sendTransaction("claimWithSignature",[r,t.signature],e),n=this.contractWrapper.parseLogs("TokensClaimed",null==i?void 0:i.logs),s=n[0].args.startTokenId,c=s.add(n[0].args.quantityClaimed),o=[];for(let t=s;t.lt(c);t=t.add(1))o.push({id:t,receipt:i,data:()=>this.erc721.get(t)});return o}async mapPayloadToContractStruct(t){let r=await (0,T.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress),a=c.$.encode(["string[]","address","address","uint256","address","uint256","uint256","address"],[t.tierPriority,t.to,t.royaltyRecipient,t.royaltyBps,t.primarySaleRecipient,t.quantity,r,t.currencyAddress]);return{uid:t.uid,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,data:a}}constructor(t,r,a){this.featureName=p.cZ.name,this.createBatchWithTier=(0,u.f)(async(t,r,a)=>{let e=await this.erc721.nextTokenIdToMint(),i=await (0,d.u)(t,this.storage,e.toNumber(),a),s=(0,d.g)(i);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[i.length,s.endsWith("/")?s:"".concat(s,"/"),r,n.Y0("")],parse:t=>{let r=this.contractWrapper.parseLogs("TokensLazyMinted",null==t?void 0:t.logs),a=r[0].args[1],e=r[0].args[2],i=[];for(let r=a;r.lte(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.getTokenMetadata(r)});return i}})}),this.createDelayedRevealBatchWithTier=(0,u.f)(async(t,r,a,e,i)=>{if(!a)throw Error("Password is required");let s=await this.storage.uploadBatch([w.C.parse(t)],{rewriteFileNames:{fileStartNumber:0}}),p=(0,d.g)(s),l=await this.erc721.nextTokenIdToMint(),h=await this.storage.uploadBatch(r.map(t=>w.C.parse(t)),{onProgress:null==i?void 0:i.onProgress,rewriteFileNames:{fileStartNumber:l.toNumber()}}),m=(0,d.g)(h),g=await this.contractWrapper.read("getBaseURICount",[]),y=await this.contractWrapper.getChainID(),W=o.keccak256(["string","uint256","uint256","address"],[a,y,g,this.contractWrapper.address]),f=await this.contractWrapper.read("encryptDecrypt",[n.Y0(m),W]),T=o.keccak256(["bytes","bytes","uint256"],[n.Y0(m),W,y]),C=c.$.encode(["bytes","bytes32"],[f,T]);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"lazyMint",args:[h.length,p.endsWith("/")?p:"".concat(p,"/"),e,C],parse:t=>{let r=this.contractWrapper.parseLogs("TokensLazyMinted",null==t?void 0:t.logs),a=r[0].args[1],e=r[0].args[2],i=[];for(let r=a;r.lte(e);r=r.add(1))i.push({id:r,receipt:t,data:()=>this.erc721.getTokenMetadata(r)});return i}})}),this.reveal=(0,u.f)(async(t,r)=>{if(!r)throw Error("Password is required");let a=await this.contractWrapper.getChainID(),e=o.keccak256(["string","uint256","uint256","address"],[r,a,t,this.contractWrapper.address]);try{let r=await this.contractWrapper.callStatic().reveal(t,e);if(!r.includes("://")||!r.endsWith("/"))throw Error("invalid password")}catch(t){throw Error("invalid password")}return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"reveal",args:[t,e]})}),this.erc721=t,this.contractWrapper=r,this.storage=a}}class z{async verify(t){let r;let a=await this.isLegacyNFTContract(),e=t.payload,i=t.signature;return r=a?await this.mapLegacyPayloadToContractStruct(e):await this.mapPayloadToContractStruct(e),(await this.contractWrapper.read("verify",[r,i]))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){let r=await this.isLegacyNFTContract(),a=await Promise.all(t.map(t=>v.t.parseAsync(t))),e=a.map(t=>t.metadata),i=await (0,d.u)(e,this.storage),n=await this.contractWrapper.getChainID(),s=this.contractWrapper.getSigner();return(0,f.Z)(s,"No signer available"),await Promise.all(a.map(async(t,a)=>{let e;let c=i[a],o=await v.u.parseAsync({...t,uri:c});return e=r?await this.contractWrapper.signTypedData(s,{name:"TokenERC721",version:"1",chainId:n,verifyingContract:this.contractWrapper.address},{MintRequest:v.v},await this.mapLegacyPayloadToContractStruct(o)):await this.contractWrapper.signTypedData(s,{name:"SignatureMintERC721",version:"1",chainId:n,verifyingContract:await this.contractWrapper.address},{MintRequest:v.x},await this.mapPayloadToContractStruct(o)),{payload:o,signature:e.toString()}}))}async mapPayloadToContractStruct(t){let r=await (0,T.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient,uri:t.uri,quantity:t.quantity,pricePerToken:r,currency:t.currencyAddress,validityStartTimestamp:t.mintStartTime,validityEndTimestamp:t.mintEndTime,uid:t.uid}}async mapLegacyPayloadToContractStruct(t){let r=await (0,T.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress);return{to:t.to,price:r,uri:t.uri,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid,royaltyRecipient:t.royaltyRecipient,royaltyBps:t.royaltyBps,primarySaleRecipient:t.primarySaleRecipient}}async isLegacyNFTContract(){return(0,h.d)(this.contractWrapper,"ERC721SignatureMintV1")}constructor(t,r){this.featureName=p.c_.name,this.mint=(0,u.f)(async t=>{let r=t.payload,a=t.signature,e=await this.contractWrapper.getCallOverrides(),i=t=>{let r=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===r.length)throw Error("No MintWithSignature event found");return{id:r[0].args.tokenIdMinted,receipt:t}};if(await this.isLegacyNFTContract()){let t=await this.mapLegacyPayloadToContractStruct(r),n=t.price;return await (0,w.s)(this.contractWrapper,n,r.currencyAddress,e),u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[t,a],overrides:e,parse:i})}{let t=await this.mapPayloadToContractStruct(r),n=t.pricePerToken.mul(t.quantity);return await (0,w.s)(this.contractWrapper,n,r.currencyAddress,e),u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[t,a],overrides:e,parse:i})}}),this.mintBatch=(0,u.f)(async t=>{let r=await this.isLegacyNFTContract(),a=(await Promise.all(t.map(t=>r?this.mapLegacyPayloadToContractStruct(t.payload):this.mapPayloadToContractStruct(t.payload)))).map((r,a)=>{let e=t[a],n=e.signature,s=e.payload.price;if(i.O$.from(s).gt(0))throw Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:r,signature:n}}),e=new y.C(this.contractWrapper),n=a.map(t=>e.encode("mintWithSignature",[t.message,t.signature]));if((0,h.h)("multicall",this.contractWrapper))return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[n],parse:t=>{let r=this.contractWrapper.parseLogs("TokensMintedWithSignature",t.logs);if(0===r.length)throw Error("No MintWithSignature event found");return r.map(r=>({id:r.args.tokenIdMinted,receipt:t}))}});throw Error("Multicall not available on this contract!")}),this.contractWrapper=t,this.storage=r}}class U{get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){let[r,a]=await Promise.all([this.ownerOf(t).catch(()=>s.d),this.getTokenMetadata(t).catch(()=>({id:t.toString(),uri:"",...d.F}))]);return{owner:r,metadata:a,type:"ERC721",supply:"1"}}async ownerOf(t){return await this.contractWrapper.read("ownerOf",[t])}async balanceOf(t){return await this.contractWrapper.read("balanceOf",[await (0,p.aL)(t)])}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async isApproved(t,r){let[a,e]=await Promise.all([(0,p.aL)(t),(0,p.aL)(r)]);return await this.contractWrapper.read("isApprovedForAll",[a,e])}async getAll(t){return(0,l.a)(this.query,p.cY).all(t)}async getAllOwners(t){return(0,l.a)(this.query,p.cY).allOwners(t)}async totalCount(){return this.nextTokenIdToMint()}async totalCirculatingSupply(){return(0,l.a)(this.query,p.cY).totalCirculatingSupply()}async getOwned(t,r){var a;if(t&&(t=await (0,p.aL)(t)),null===(a=this.query)||void 0===a?void 0:a.owned)return this.query.owned.all(t,r);{let[a,e]=await Promise.all([t||this.contractWrapper.getSignerAddress(),this.getAllOwners(r)]),i=(e||[]).filter(t=>{var r;return(null==a?void 0:a.toLowerCase())===(null===(r=t.owner)||void 0===r?void 0:r.toLowerCase())});return await Promise.all(i.map(async t=>this.get(t.tokenId)))}}async getOwnedTokenIds(t){var r;if(t&&(t=await (0,p.aL)(t)),null===(r=this.query)||void 0===r?void 0:r.owned)return this.query.owned.tokenIds(t);{let[r,a]=await Promise.all([t||this.contractWrapper.getSignerAddress(),this.getAllOwners()]);return(a||[]).filter(t=>{var a;return(null==r?void 0:r.toLowerCase())===(null===(a=t.owner)||void 0===a?void 0:a.toLowerCase())}).map(t=>i.O$.from(t.tokenId))}}async getMintTransaction(t,r){return this.mintTo.prepare(t,r)}async update(t,r){return this.updateMetadata(t,r)}async getClaimTransaction(t,r,a){let e=this.claimWithConditions,i=this.claimCustom;if(e)return e.conditions.getClaimTransaction(t,r,a);if(i)return i.getClaimTransaction(t,r,a);throw new p.x(p.cO)}async totalClaimedSupply(){let t=this.contractWrapper;if((0,h.h)("totalMinted",t))return this.contractWrapper.read("totalMinted",[]);if((0,h.h)("nextTokenIdToClaim",t))return this.contractWrapper.read("nextTokenIdToClaim",[]);throw Error("No function found on contract to get total claimed supply")}async totalUnclaimedSupply(){let[t,r]=await Promise.all([this.nextTokenIdToMint(),this.totalClaimedSupply()]);return t.sub(r)}get claimConditions(){return(0,l.a)(this.claimWithConditions,p.cM).conditions}get tieredDrop(){return(0,l.a)(this.tieredDropable,p.cZ)}get signature(){return(0,l.a)(this.signatureMintable,p.c_)}get revealer(){var t;return(0,l.a)(null===(t=this.lazyMintable)||void 0===t?void 0:t.revealer,p.cQ)}get sharedMetadata(){return(0,l.a)(this.erc721SharedMetadata,p.cV)}async getTokenMetadata(t){let r=await this.contractWrapper.read("tokenURI",[t]);if(!r)throw new p.n;return(0,d.f)(t,r,this.storage)}async nextTokenIdToMint(){if((0,h.h)("nextTokenIdToMint",this.contractWrapper)){let t=await this.contractWrapper.read("nextTokenIdToMint",[]);return(0,h.h)("startTokenId",this.contractWrapper)&&(t=t.sub(await this.contractWrapper.read("startTokenId",[]))),t}if((0,h.h)("totalSupply",this.contractWrapper))return await this.contractWrapper.read("totalSupply",[]);throw Error("Contract requires either `nextTokenIdToMint` or `totalSupply` function available to determine the next token ID to mint")}detectErc721Enumerable(){if((0,h.d)(this.contractWrapper,"ERC721Supply")||(0,h.h)("nextTokenIdToMint",this.contractWrapper))return new B(this,this.contractWrapper)}detectErc721Mintable(){if((0,h.d)(this.contractWrapper,"ERC721Mintable"))return new N(this,this.contractWrapper,this.storage)}detectErc721Burnable(){if((0,h.d)(this.contractWrapper,"ERC721Burnable"))return new b(this.contractWrapper)}detectErc721LazyMintable(){if((0,h.d)(this.contractWrapper,"ERC721LazyMintable"))return new E(this,this.contractWrapper,this.storage)}detectErc721TieredDrop(){if((0,h.d)(this.contractWrapper,"ERC721TieredDrop"))return new x(this,this.contractWrapper,this.storage)}detectErc721SignatureMintable(){if((0,h.d)(this.contractWrapper,"ERC721SignatureMintV1")||(0,h.d)(this.contractWrapper,"ERC721SignatureMintV2"))return new z(this.contractWrapper,this.storage)}detectErc721ClaimableWithConditions(){if((0,h.d)(this.contractWrapper,"ERC721ClaimConditionsV1")||(0,h.d)(this.contractWrapper,"ERC721ClaimConditionsV2")||(0,h.d)(this.contractWrapper,"ERC721ClaimPhasesV1")||(0,h.d)(this.contractWrapper,"ERC721ClaimPhasesV2"))return new S(this,this.contractWrapper,this.storage)}detectErc721Claimable(){if((0,h.d)(this.contractWrapper,"ERC721ClaimCustom"))return new M(this,this.contractWrapper)}detectErc721ClaimableZora(){if((0,h.d)(this.contractWrapper,"ERC721ClaimZora"))return new k(this,this.contractWrapper)}detectErc721SharedMetadata(){if((0,h.d)(this.contractWrapper,"ERC721SharedMetadata"))return new L(this.contractWrapper,this.storage)}detectErc721LoyaltyCard(){if((0,h.d)(this.contractWrapper,"ERC721LoyaltyCard"))return new I(this.contractWrapper)}detectErc721UpdatableMetadata(){if((0,h.d)(this.contractWrapper,"ERC721UpdatableMetadata"))return new P(this.contractWrapper,this.storage)}constructor(t,r,a){this.featureName=p.c$.name,this.transfer=(0,u.f)(async(t,r)=>{let[a,e]=await Promise.all([this.contractWrapper.getSignerAddress(),(0,p.aL)(t)]);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom(address,address,uint256)",args:[a,e,r]})}),this.transferFrom=(0,u.f)(async(t,r,a)=>{let[e,i]=await Promise.all([(0,p.aL)(t),(0,p.aL)(r)]);return u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom(address,address,uint256)",args:[e,i,a]})}),this.setApprovalForAll=(0,u.f)(async(t,r)=>u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setApprovalForAll",args:[await (0,p.aL)(t),r]})),this.setApprovalForToken=(0,u.f)(async(t,r)=>u.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[await (0,p.aL)(t),r]})),this.mint=(0,u.f)(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)),this.mintTo=(0,u.f)(async(t,r)=>(0,l.a)(this.mintable,p.cU).to.prepare(t,r)),this.mintBatch=(0,u.f)(async t=>this.mintBatchTo.prepare(await this.contractWrapper.getSignerAddress(),t)),this.mintBatchTo=(0,u.f)(async(t,r)=>{var a;return(0,l.a)(null===(a=this.mintable)||void 0===a?void 0:a.batch,p.cT).to.prepare(t,r)}),this.burn=(0,u.f)(async t=>(0,l.a)(this.burnable,p.cL).token.prepare(t)),this.cancel=(0,u.f)(async t=>(0,l.a)(this.loyaltyCard,p.cR).cancel.prepare(t)),this.revoke=(0,u.f)(async t=>(0,l.a)(this.loyaltyCard,p.cR).revoke.prepare(t)),this.lazyMint=(0,u.f)(async(t,r)=>(0,l.a)(this.lazyMintable,p.cP).lazyMint.prepare(t,r)),this.updateMetadata=(0,u.f)(async(t,r)=>this.lazyMintable?this.lazyMintable.updateMetadata.prepare(t,r):(0,l.a)(this.updatableMetadata,p.cS).update.prepare(t,r)),this.claim=(0,u.f)(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r)),this.claimTo=(0,u.f)(async(t,r,a)=>{let e=this.claimWithConditions,i=this.claimCustom,n=this.claimZora;if(e)return e.to.prepare(t,r,a);if(i)return i.to.prepare(t,r,a);if(n)return n.to.prepare(t,r,a);throw new p.x(p.cO)}),this.contractWrapper=t,this.storage=r,this.query=this.detectErc721Enumerable(),this.mintable=this.detectErc721Mintable(),this.burnable=this.detectErc721Burnable(),this.lazyMintable=this.detectErc721LazyMintable(),this.tieredDropable=this.detectErc721TieredDrop(),this.signatureMintable=this.detectErc721SignatureMintable(),this.claimWithConditions=this.detectErc721ClaimableWithConditions(),this.claimCustom=this.detectErc721Claimable(),this.claimZora=this.detectErc721ClaimableZora(),this.erc721SharedMetadata=this.detectErc721SharedMetadata(),this.loyaltyCard=this.detectErc721LoyaltyCard(),this.updatableMetadata=this.detectErc721UpdatableMetadata(),this._chainId=a}}}}]);