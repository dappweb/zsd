"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[15451],{15451:function(t,r,a){a.d(r,{E:function(){return T},a:function(){return C}});var e=a(73877),i=a(61501),n=a(12158),s=a(89586),c=a(11454),o=a(13545),p=a(21325),h=a(33676),l=a(45094),m=a(78680),u=a(15418),d=a(23198);async function W(t,r){let a=await t.read("decimals",[]);return e.parseUnits(s.cw.parse(r),a)}class g{constructor(t,r){this.featureName=s.cD.name,this.tokens=(0,p.f)(async t=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]})),this.from=(0,p.f)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([(0,s.aL)(t),this.erc20.normalizeAmount(r)])})),this.erc20=t,this.contractWrapper=r}}class f{constructor(t,r,a){this.featureName=s.cE.name,this.to=(0,p.f)(async(t,r,a)=>{let e=await this.erc20.normalizeAmount(r);return await this.conditions.getClaimTransaction(t,e,a)}),this.erc20=t,this.contractWrapper=r,this.storage=a;let e=new o.C(this.contractWrapper,s.bg,this.storage);this.conditions=new h.D(this.contractWrapper,e,this.storage)}}class y{constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a,this.claim=new f(this.erc20,this.contractWrapper,this.storage)}}class w{constructor(t,r){this.featureName=s.cF.name,this.to=(0,p.f)(async t=>{let r=new n.C(this.contractWrapper),a=(await Promise.all(t.map(t=>Promise.all([(0,s.aL)(t.toAddress),this.erc20.normalizeAmount(t.amount)])))).map(t=>{let[a,e]=t;return r.encode("mintTo",[a,e])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})}),this.erc20=t,this.contractWrapper=r}}class b{async getMintTransaction(t,r){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([(0,s.aL)(t),this.erc20.normalizeAmount(r)])})}detectErc20BatchMintable(){if((0,o.d)(this.contractWrapper,"ERC20BatchMintable"))return new w(this.erc20,this.contractWrapper)}constructor(t,r){this.featureName=s.cG.name,this.to=(0,p.f)(async(t,r)=>await this.getMintTransaction(t,r)),this.erc20=t,this.contractWrapper=r,this.batch=this.detectErc20BatchMintable()}}class C{async verify(t){let r=t.payload,a=t.signature,e=await this.mapPayloadToContractStruct(r);return(await this.contractWrapper.read("verify",[e,a]))[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){var r;await (null===(r=this.roles)||void 0===r?void 0:r.verify(["minter"],await this.contractWrapper.getSignerAddress()));let[a,e,i]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map(t=>d.S.parseAsync(t)))]),n=this.contractWrapper.getSigner();(0,l.Z)(n,"No signer available");let s=await Promise.all(i.map(t=>d.n.parseAsync(t))),c=await Promise.all(s.map(t=>this.mapPayloadToContractStruct(t))),o=await Promise.all(c.map(t=>this.contractWrapper.signTypedData(n,{name:e,version:"1",chainId:a,verifyingContract:this.contractWrapper.address},{MintRequest:d.M},t)));return i.map((t,r)=>({payload:s[r],signature:o[r].toString()}))}async mapPayloadToContractStruct(t){let[r,a]=await Promise.all([(0,m.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),i=e.parseUnits(t.quantity,a);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:i,price:r,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}constructor(t,r){this.featureName=s.cH.name,this.mint=(0,p.f)(async t=>{let r=t.payload,a=t.signature,[e,n]=await Promise.all([this.mapPayloadToContractStruct(r),this.contractWrapper.getCallOverrides()]);return await (0,u.s)(this.contractWrapper,i.O$.from(e.price),r.currencyAddress,n),p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,a],overrides:n})}),this.mintBatch=(0,p.f)(async t=>{let r=await Promise.all(t.map(t=>this.mapPayloadToContractStruct(t.payload))),a=t.map((t,a)=>{let e=r[a],n=t.signature,s=t.payload.price;if(i.O$.from(s).gt(0))throw Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:e,signature:n}}),e=new n.C(this.contractWrapper),s=a.map(t=>e.encode("mintWithSignature",[t.message,t.signature]));return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[s]})}),this.contractWrapper=t,this.roles=r}}class T{get chainId(){return this._chainId}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await (0,n.f)(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await (0,s.aL)(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){let[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),(0,s.aL)(t)]);return await this.allowanceOf(r,a)}async allowanceOf(t,r){let a=await Promise.all([(0,s.aL)(t),(0,s.aL)(r)]);return await this.getValue(await this.contractWrapper.read("allowance",a))}async getMintTransaction(t,r){return(0,c.a)(this.mintable,s.cG).getMintTransaction(t,r)}get claimConditions(){var t;return(0,c.a)(null===(t=this.droppable)||void 0===t?void 0:t.claim,s.cE).conditions}get signature(){return(0,c.a)(this.signatureMintable,s.cH)}async normalizeAmount(t){return W(this.contractWrapper,t)}async getValue(t){return await (0,n.a)(this.contractWrapper.getProvider(),this.getAddress(),i.O$.from(t))}detectErc20Mintable(){if((0,o.d)(this.contractWrapper,"ERC20"))return new b(this,this.contractWrapper)}detectErc20Burnable(){if((0,o.d)(this.contractWrapper,"ERC20Burnable"))return new g(this,this.contractWrapper)}detectErc20Droppable(){if((0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV2")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV2"))return new y(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if((0,o.d)(this.contractWrapper,"ERC20SignatureMintable"))return new C(this.contractWrapper)}constructor(t,r,a){this.featureName=s.cI.name,this.transfer=(0,p.f)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([(0,s.aL)(t),this.normalizeAmount(r)])})),this.transferFrom=(0,p.f)(async(t,r,a)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([(0,s.aL)(t),(0,s.aL)(r),this.normalizeAmount(a)])})),this.setAllowance=(0,p.f)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([(0,s.aL)(t),this.normalizeAmount(r)])})),this.transferBatch=(0,p.f)(async t=>{let r=new n.C(this.contractWrapper),a=(await Promise.all(t.map(t=>Promise.all([this.normalizeAmount(t.amount),(0,s.aL)(t.toAddress)])))).map(t=>{let[a,e]=t;return r.encode("transfer",[e,a])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})}),this.mint=(0,p.f)(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t)),this.mintTo=(0,p.f)(async(t,r)=>(0,c.a)(this.mintable,s.cG).to.prepare(t,r)),this.mintBatchTo=(0,p.f)(async t=>{var r;return(0,c.a)(null===(r=this.mintable)||void 0===r?void 0:r.batch,s.cF).to.prepare(t)}),this.burn=(0,p.f)(async t=>(0,c.a)(this.burnable,s.cD).tokens.prepare(t)),this.burnFrom=(0,p.f)(async(t,r)=>(0,c.a)(this.burnable,s.cD).from.prepare(t,r)),this.claim=(0,p.f)(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r)),this.claimTo=(0,p.f)(async(t,r,a)=>{var e;return(0,c.a)(null===(e=this.droppable)||void 0===e?void 0:e.claim,s.cE).to.prepare(t,r,a)}),this.contractWrapper=t,this.storage=r,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=a}}}}]);