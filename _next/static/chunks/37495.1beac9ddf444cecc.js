"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[37495],{36079:function(t,r,e){e.d(r,{c:function(){return n}});var a=e(89586),i=e(12158);function n(t){return(0,i.i)(t)?a.aV:t}},33270:function(t,r,e){e.d(r,{C:function(){return n}});var a=e(21325),i=e(89586);class n{async get(){let[t,r]=await this.contractWrapper.read("getPlatformFeeInfo",[]);return i.bH.parseAsync({platform_fee_recipient:t,platform_fee_basis_points:r})}constructor(t){this.featureName=i.du.name,this.set=(0,a.f)(async t=>{let r=await i.bH.parseAsync(t);return a.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setPlatformFeeInfo",args:[r.platform_fee_recipient,r.platform_fee_basis_points]})}),this.contractWrapper=t}}},72762:function(t,r,e){e.d(r,{a:function(){return m},g:function(){return f},h:function(){return p},i:function(){return d},m:function(){return u},v:function(){return l}});var a=e(8400),i=e(61501),n=e(45094),o=e(73853),s=e(89586),c=e(12158);async function d(t,r,i,n,s){try{let c=(await e.e(31787).then(e.t.bind(e,31787,19))).default,d=new a.CH(i,c,t),[p,l]=await Promise.all([d.supportsInterface(o.I),d.supportsInterface(o.a)]);if(p){let o;let c=(await Promise.resolve().then(e.t.bind(e,32557,19))).default,d=new a.CH(i,c,t);if(await d.isApprovedForAll(s,r))return!0;try{o=await d.getApproved(n)}catch(t){}return(null==o?void 0:o.toLowerCase())===r.toLowerCase()}if(!l)return console.error("Contract does not implement ERC 1155 or ERC 721."),!1;{let n=(await Promise.resolve().then(e.t.bind(e,10506,19))).default,o=new a.CH(i,n,t);return await o.isApprovedForAll(s,r)}}catch(t){return console.error("Failed to check if token is approved",t),!1}}async function p(t,r,a,i,n){let c=(await e.e(31787).then(e.t.bind(e,31787,19))).default,d=new s.cs(t.getSignerOrProvider(),a,c,t.options,t.storage),[p,l]=await Promise.all([d.read("supportsInterface",[o.I]),d.read("supportsInterface",[o.a])]);if(p){let o=(await Promise.resolve().then(e.t.bind(e,32557,19))).default,c=new s.cs(t.getSignerOrProvider(),a,o,t.options,t.storage);await c.read("isApprovedForAll",[n,r])||(await c.read("getApproved",[i])).toLowerCase()===r.toLowerCase()||await c.sendTransaction("setApprovalForAll",[r,!0])}else if(l){let i=(await Promise.resolve().then(e.t.bind(e,10506,19))).default,o=new s.cs(t.getSignerOrProvider(),a,i,t.options,t.storage);await o.read("isApprovedForAll",[n,r])||await o.sendTransaction("setApprovalForAll",[r,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}function l(t){(0,n.Z)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,n.Z)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,n.Z)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,n.Z)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,n.Z)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,n.Z)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type&&(0,n.Z)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function u(t,r,e){return{quantity:e.quantityDesired,pricePerToken:e.pricePerToken,currencyContractAddress:e.currency,buyerAddress:e.offeror,quantityDesired:e.quantityWanted,currencyValue:await (0,c.a)(t,e.currency,e.quantityWanted.mul(e.pricePerToken)),listingId:r}}function m(t,r,e){return e=i.O$.from(e),t=i.O$.from(t),r=i.O$.from(r),!t.eq(i.O$.from(0))&&r.sub(t).mul(s.dE).div(t).gte(e)}async function f(t,r,e){let a=[];for(;r-t>o.D;)a.push(e(t,t+o.D-1)),t+=o.D;return a.push(e(t,r-1)),await Promise.all(a)}},34795:function(t,r,e){e.d(r,{M:function(){return L},a:function(){return T},b:function(){return O}});var a,i=e(61501),n=e(8400),o=e(83531),s=e(73877),c=e(45094),d=e(36079),p=e(12158),l=e(78680),u=e(15418),m=e(89586),f=e(72762),h=e(73853),g=e(21325),w=e(11454),y=e(30248),A=e(13545),C=e(21096);let v=y.z.object({assetContractAddress:m.b9,tokenId:m.b6,quantity:m.b6.default(1),currencyContractAddress:m.b9.default(m.aV),pricePerToken:m.cw,startTimestamp:w.R.default(new Date),endTimestamp:w.E,isReservedListing:y.z.boolean().default(!1)}),W=((a={})[a.UNSET=0]="UNSET",a[a.Created=1]="Created",a[a.Completed=2]="Completed",a[a.Cancelled=3]="Cancelled",a[a.Active=4]="Active",a[a.Expired=5]="Expired",a);class L{getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalListings",[])}async getAll(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No listings exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllListings",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapListing(t)))}async getAllValid(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No listings exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllValidListings",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapListing(t)))}async getListing(t){let r=await this.contractWrapper.read("getListing",[t]);return await this.mapListing(r)}async isBuyerApprovedForListing(t,r){if(!(await this.validateListing(i.O$.from(t))).isReservedListing)throw Error("Listing ".concat(t," is not a reserved listing."));return await this.contractWrapper.read("isBuyerApprovedForListing",[t,await (0,m.aL)(r)])}async isCurrencyApprovedForListing(t,r){return await this.validateListing(i.O$.from(t)),await this.contractWrapper.read("isCurrencyApprovedForListing",[t,await (0,m.aL)(r)])}async currencyPriceForListing(t,r){let e=await this.validateListing(i.O$.from(t)),a=await (0,m.aL)(r);if(a===e.currencyContractAddress)return e.pricePerToken;if(!await this.isCurrencyApprovedForListing(t,a))throw Error("Currency ".concat(a," is not approved for Listing ").concat(t,"."));return await this.contractWrapper.read("currencyPriceForListing",[t,a])}async validateListing(t){try{return await this.getListing(t)}catch(r){throw console.error("Error getting the listing with id ".concat(t)),r}}async mapListing(t){let r=W.UNSET,e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=i.O$.from(t.startTimestamp).gt(e)?W.Created:i.O$.from(t.endTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{assetContractAddress:t.assetContract,currencyContractAddress:t.currency,pricePerToken:t.pricePerToken.toString(),currencyValuePerToken:await (0,p.a)(this.contractWrapper.getProvider(),t.currency,t.pricePerToken),id:t.listingId.toString(),tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),startTimeInSeconds:i.O$.from(t.startTimestamp).toNumber(),asset:await (0,h.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:i.O$.from(t.endTimestamp).toNumber(),creatorAddress:t.listingCreator,isReservedListing:t.reserved,status:r}}async isStillValidListing(t,r){if(!await (0,f.i)(this.contractWrapper.getProvider(),this.getAddress(),t.assetContractAddress,t.tokenId,t.creatorAddress))return{valid:!1,error:"Token '".concat(t.tokenId,"' from contract '").concat(t.assetContractAddress,"' is not approved for transfer")};let a=this.contractWrapper.getProvider(),i=(await e.e(31787).then(e.t.bind(e,31787,19))).default,o=new n.CH(t.assetContractAddress,i,a),s=await o.supportsInterface(h.I),c=await o.supportsInterface(h.a);if(s){let r;let i=(await Promise.resolve().then(e.t.bind(e,32557,19))).default,o=new n.CH(t.assetContractAddress,i,a);try{r=await o.ownerOf(t.tokenId)}catch(t){}let s=(null==r?void 0:r.toLowerCase())===t.creatorAddress.toLowerCase();return{valid:s,error:s?void 0:"Seller is not the owner of Token '".concat(t.tokenId,"' from contract '").concat(t.assetContractAddress," anymore'")}}if(!c)return{valid:!1,error:"Contract does not implement ERC 1155 or ERC 721."};{let i=(await Promise.resolve().then(e.t.bind(e,10506,19))).default,o=new n.CH(t.assetContractAddress,i,a),s=(await o.balanceOf(t.creatorAddress,t.tokenId)).gte(r||t.quantity);return{valid:s,error:s?void 0:"Seller does not have enough balance of Token '".concat(t.tokenId,"' from contract '").concat(t.assetContractAddress," to fulfill the listing")}}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){let t=await (0,m.aL)(r.seller);e=e.filter(r=>r.listingCreator.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}if(r.tokenContract){let t=await (0,m.aL)(r.tokenContract);e=e.filter(r=>r.assetContract.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter(t=>{var e;return t.tokenId.toString()===(null==r?void 0:null===(e=r.tokenId)||void 0===e?void 0:e.toString())}))}return(null==r?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}constructor(t,r){this.featureName=m.dA.name,this.createListing=(0,g.f)(async t=>{let r=await v.parseAsync(t);await (0,f.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());let e=await (0,l.n)(this.contractWrapper.getProvider(),r.pricePerToken,r.currencyContractAddress),a=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(a)&&(r.startTimestamp=i.O$.from(a));let n=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createListing",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:(0,d.c)(r.currencyContractAddress),pricePerToken:e,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp,reserved:r.isReservedListing}],parse:t=>({id:this.contractWrapper.parseLogs("NewListing",null==t?void 0:t.logs)[0].args.listingId,receipt:t})});return n.setGasLimitMultiple(1.2),n}),this.createListingsBatch=(0,g.f)(async t=>{let r=(await Promise.all(t.map(t=>this.createListing.prepare(t)))).map(t=>t.encode()),e=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("NewListing",null==t?void 0:t.logs).map(r=>({id:r.args.listingId,receipt:t}))});return e.setGasLimitMultiple(1.2),e}),this.updateListing=(0,g.f)(async(t,r)=>{let e=await v.parseAsync(r);await (0,f.h)(this.contractWrapper,this.getAddress(),e.assetContractAddress,e.tokenId,await this.contractWrapper.getSignerAddress());let a=await (0,l.n)(this.contractWrapper.getProvider(),e.pricePerToken,e.currencyContractAddress),i=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"updateListing",args:[t,{assetContract:e.assetContractAddress,tokenId:e.tokenId,quantity:e.quantity,currency:(0,d.c)(e.currencyContractAddress),pricePerToken:a,startTimestamp:e.startTimestamp,endTimestamp:e.endTimestamp,reserved:e.isReservedListing}],parse:t=>({id:this.contractWrapper.parseLogs("UpdatedListing",null==t?void 0:t.logs)[0].args.listingId,receipt:t})});return i.setGasLimitMultiple(1.2),i}),this.cancelListing=(0,g.f)(async t=>{let r=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelListing",args:[t]});return r.setGasLimitMultiple(1.2),r}),this.buyFromListing=(0,g.f)(async(t,r,e)=>{e&&(e=await (0,m.aL)(e));let a=await this.validateListing(i.O$.from(t)),{valid:n,error:o}=await this.isStillValidListing(a,r);if(!n)throw Error("Listing ".concat(t," is no longer valid. ").concat(o));let s=e||await this.contractWrapper.getSignerAddress(),c=i.O$.from(r),d=i.O$.from(a.pricePerToken).mul(c),p=await this.contractWrapper.getCallOverrides()||{};await (0,u.s)(this.contractWrapper,d,a.currencyContractAddress,p);let l=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"buyFromListing",args:[t,s,c,a.currencyContractAddress,d],overrides:p});return l.setGasLimitMultiple(1.2),l}),this.approveBuyerForReservedListing=(0,g.f)(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r))throw Error("Buyer ".concat(r," already approved for listing ").concat(t,"."));{let e=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!0]});return e.setGasLimitMultiple(1.2),e}}),this.revokeBuyerApprovalForReservedListing=(0,g.f)(async(t,r)=>{if(await this.isBuyerApprovedForListing(t,r)){let e=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveBuyerForListing",args:[t,r,!1]});return e.setGasLimitMultiple(1.2),e}throw Error("Buyer ".concat(r," not approved for listing ").concat(t,"."))}),this.approveCurrencyForListing=(0,g.f)(async(t,r,e)=>{let a=await this.validateListing(i.O$.from(t)),n=await (0,m.aL)(r);n===a.currencyContractAddress&&(0,c.Z)(e===a.pricePerToken,"Approving listing currency with a different price.");let o=await this.contractWrapper.read("currencyPriceForListing",[t,n]);(0,c.Z)(e===o,"Currency already approved with this price.");let s=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,n,e]});return s.setGasLimitMultiple(1.2),s}),this.revokeCurrencyApprovalForListing=(0,g.f)(async(t,r)=>{let e=await this.validateListing(i.O$.from(t)),a=await (0,m.aL)(r);if(a===e.currencyContractAddress)throw Error("Can't revoke approval for main listing currency.");let n=await this.contractWrapper.read("currencyPriceForListing",[t,a]);(0,c.Z)(!n.isZero(),"Currency not approved.");let o=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approveCurrencyForListing",args:[t,a,i.O$.from(0)]});return o.setGasLimitMultiple(1.2),o}),this.contractWrapper=t,this.storage=r,this.events=new A.a(this.contractWrapper),this.encoder=new p.C(this.contractWrapper),this.interceptor=new C.C(this.contractWrapper),this.estimator=new A.G(this.contractWrapper)}}let b=y.z.object({assetContractAddress:m.b9,tokenId:m.b6,quantity:m.b6.default(1),currencyContractAddress:m.b9.default(m.aV),minimumBidAmount:m.cw,buyoutBidAmount:m.cw,timeBufferInSeconds:m.b6.default(900),bidBufferBps:m.b6.default(500),startTimestamp:w.R.default(new Date),endTimestamp:w.E});class T{getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalAuctions",[])}async getAll(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No auctions exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllAuctions",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapAuction(t)))}async getAllValid(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No auctions exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllValidAuctions",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapAuction(t)))}async getAuction(t){let r=await this.contractWrapper.read("getAuction",[t]);return await this.mapAuction(r)}async getWinningBid(t){await this.validateAuction(i.O$.from(t));let r=await this.contractWrapper.read("getWinningBid",[t]);if(r._bidder!==o.d)return await this.mapBid(t.toString(),r._bidder,r._currency,r._bidAmount.toString())}async isWinningBid(t,r){return await this.contractWrapper.read("isNewWinningBid",[t,r])}async getWinner(t){let r=await this.validateAuction(i.O$.from(t)),e=await this.contractWrapper.read("getWinningBid",[t]),a=i.O$.from(Math.floor(Date.now()/1e3)),n=i.O$.from(r.endTimeInSeconds);if(a.gt(n)&&e._bidder!==o.d)return e._bidder;let s=new A.a(this.contractWrapper),c=(await s.getEvents("AuctionClosed")).find(r=>r.data.auctionId.eq(i.O$.from(t)));if(!c)throw Error("Could not find auction with ID ".concat(t," in closed auctions"));return c.data.winningBidder}async getBidBufferBps(t){return(await this.getAuction(t)).bidBufferBps}async getMinimumNextBid(t){let[r,e,a]=await Promise.all([this.getBidBufferBps(t),this.getWinningBid(t),this.validateAuction(i.O$.from(t))]),n=e?i.O$.from(e.bidAmount):i.O$.from(a.minimumBidAmount),o=n.add(n.mul(r).div(1e4));return(0,p.a)(this.contractWrapper.getProvider(),a.currencyContractAddress,o)}async validateAuction(t){try{return await this.getAuction(t)}catch(r){throw console.error("Error getting the auction with id ".concat(t)),r}}async mapAuction(t){let r=W.UNSET,e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=i.O$.from(t.startTimestamp).gt(e)?W.Created:i.O$.from(t.endTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{id:t.auctionId.toString(),creatorAddress:t.auctionCreator,assetContractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),currencyContractAddress:t.currency,minimumBidAmount:t.minimumBidAmount.toString(),minimumBidCurrencyValue:await (0,p.a)(this.contractWrapper.getProvider(),t.currency,t.minimumBidAmount),buyoutBidAmount:t.buyoutBidAmount.toString(),buyoutCurrencyValue:await (0,p.a)(this.contractWrapper.getProvider(),t.currency,t.buyoutBidAmount),timeBufferInSeconds:i.O$.from(t.timeBufferInSeconds).toNumber(),bidBufferBps:i.O$.from(t.bidBufferBps).toNumber(),startTimeInSeconds:i.O$.from(t.startTimestamp).toNumber(),endTimeInSeconds:i.O$.from(t.endTimestamp).toNumber(),asset:await (0,h.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),status:r}}async mapBid(t,r,e,a){let i=await (0,m.aL)(r),n=await (0,m.aL)(e);return{auctionId:t,bidderAddress:i,currencyContractAddress:n,bidAmount:a,bidAmountCurrencyValue:await (0,p.a)(this.contractWrapper.getProvider(),n,a)}}async applyFilter(t,r){let e=[...t];if(r){if(r.seller){let t=await (0,m.aL)(r.seller);e=e.filter(r=>r.auctionCreator.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}if(r.tokenContract){let t=await (0,m.aL)(r.tokenContract);e=e.filter(r=>r.assetContract.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter(t=>{var e;return t.tokenId.toString()===(null==r?void 0:null===(e=r.tokenId)||void 0===e?void 0:e.toString())}))}return(null==r?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}constructor(t,r){this.featureName=m.dB.name,this.createAuction=(0,g.f)(async t=>{let r=b.parse(t);await (0,f.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress());let e=await (0,l.n)(this.contractWrapper.getProvider(),r.buyoutBidAmount,r.currencyContractAddress),a=await (0,l.n)(this.contractWrapper.getProvider(),r.minimumBidAmount,r.currencyContractAddress),n=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;r.startTimestamp.lt(n)&&(r.startTimestamp=i.O$.from(n));let o=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createAuction",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:(0,d.c)(r.currencyContractAddress),minimumBidAmount:a,buyoutBidAmount:e,timeBufferInSeconds:r.timeBufferInSeconds,bidBufferBps:r.bidBufferBps,startTimestamp:r.startTimestamp,endTimestamp:r.endTimestamp}],parse:t=>({id:this.contractWrapper.parseLogs("NewAuction",t.logs)[0].args.auctionId,receipt:t})});return o.setGasLimitMultiple(1.2),o}),this.createAuctionsBatch=(0,g.f)(async t=>{let r=(await Promise.all(t.map(t=>this.createAuction.prepare(t)))).map(t=>t.encode()),e=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[r],parse:t=>this.contractWrapper.parseLogs("NewAuction",null==t?void 0:t.logs).map(r=>({id:r.args.auctionId,receipt:t}))});return e.setGasLimitMultiple(1.2),e}),this.buyoutAuction=(0,g.f)(async t=>{let r=await this.validateAuction(i.O$.from(t)),e=await (0,p.f)(this.contractWrapper.getProvider(),r.currencyContractAddress);return this.makeBid.prepare(t,s.formatUnits(r.buyoutBidAmount,e.decimals))}),this.makeBid=(0,g.f)(async(t,r)=>{let e=await this.validateAuction(i.O$.from(t)),a=await (0,l.n)(this.contractWrapper.getProvider(),r,e.currencyContractAddress);if(a.eq(i.O$.from(0)))throw Error("Cannot make a bid with 0 value");if(i.O$.from(e.buyoutBidAmount).gt(0)&&a.gt(e.buyoutBidAmount))throw Error("Bid amount must be less than or equal to buyoutBidAmount");if(await this.getWinningBid(t)){let r=await this.isWinningBid(t,a);(0,c.Z)(r,"Bid price is too low based on the current winning bid and the bid buffer")}else{let t=i.O$.from(e.minimumBidAmount);(0,c.Z)(a.gte(t),"Bid price is too low based on minimum bid amount")}let n=await this.contractWrapper.getCallOverrides()||{};await (0,u.s)(this.contractWrapper,a,e.currencyContractAddress,n);let o=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"bidInAuction",overrides:n,args:[t,a]});return o.setGasLimitMultiple(1.2),o}),this.cancelAuction=(0,g.f)(async t=>{if(await this.getWinningBid(t))throw Error("Bids already made.");let r=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelAuction",args:[t]});return r.setGasLimitMultiple(1.2),r}),this.closeAuctionForBidder=(0,g.f)(async(t,r)=>{r||(r=await this.contractWrapper.getSignerAddress());let e=await this.validateAuction(i.O$.from(t));try{let r=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionTokens",args:[i.O$.from(t)]});return r.setGasLimitMultiple(1.2),r}catch(r){if(r.message.includes("Marketplace: auction still active."))throw new m.w(t.toString(),e.endTimeInSeconds.toString());throw r}}),this.closeAuctionForSeller=(0,g.f)(async t=>{let r=await this.validateAuction(i.O$.from(t));try{let r=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"collectAuctionPayout",args:[i.O$.from(t)]});return r.setGasLimitMultiple(1.2),r}catch(e){if(e.message.includes("Marketplace: auction still active."))throw new m.w(t.toString(),r.endTimeInSeconds.toString());throw e}}),this.executeSale=(0,g.f)(async t=>{let r=await this.validateAuction(i.O$.from(t));try{let r=await this.getWinningBid(t);(0,c.Z)(r,"No winning bid found");let e=this.encoder.encode("collectAuctionPayout",[t]),a=this.encoder.encode("collectAuctionTokens",[t]),i=g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[[e,a]]});return i.setGasLimitMultiple(1.2),i}catch(e){if(e.message.includes("Marketplace: auction still active."))throw new m.w(t.toString(),r.endTimeInSeconds.toString());throw e}}),this.contractWrapper=t,this.storage=r,this.events=new A.a(this.contractWrapper),this.encoder=new p.C(this.contractWrapper),this.interceptor=new C.C(this.contractWrapper),this.estimator=new A.G(this.contractWrapper)}}let k=y.z.object({assetContractAddress:m.b9,tokenId:m.b6,quantity:m.b6.default(1),currencyContractAddress:m.b9.default(m.aV),totalPrice:m.cw,endTimestamp:w.E});class O{getAddress(){return this.contractWrapper.address}async getTotalCount(){return await this.contractWrapper.read("totalOffers",[])}async getAll(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No offers exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllOffers",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapOffer(t)))}async getAllValid(t){let r=await this.getTotalCount(),e=i.O$.from((null==t?void 0:t.start)||0).toNumber(),a=r.toNumber();if(0===a)throw Error("No offers exist on the contract.");let n=[];n=(await (0,f.g)(e,a,(t,r)=>this.contractWrapper.read("getAllValidOffers",[t,r]))).flat();let o=await this.applyFilter(n,t);return await Promise.all(o.map(t=>this.mapOffer(t)))}async getOffer(t){let r=await this.contractWrapper.read("getOffer",[t]);return await this.mapOffer(r)}async validateOffer(t){try{return await this.getOffer(t)}catch(r){throw console.error("Error getting the offer with id ".concat(t)),r}}async mapOffer(t){let r=W.UNSET,e=(await this.contractWrapper.getProvider().getBlock("latest")).timestamp;switch(t.status){case 1:r=i.O$.from(t.expirationTimestamp).lt(e)?W.Expired:W.Active;break;case 2:r=W.Completed;break;case 3:r=W.Cancelled}return{id:t.offerId.toString(),offerorAddress:t.offeror,assetContractAddress:t.assetContract,currencyContractAddress:t.currency,tokenId:t.tokenId.toString(),quantity:t.quantity.toString(),totalPrice:t.totalPrice.toString(),currencyValue:await (0,p.a)(this.contractWrapper.getProvider(),t.currency,t.totalPrice),asset:await (0,h.c)(t.assetContract,this.contractWrapper.getProvider(),t.tokenId,this.storage),endTimeInSeconds:i.O$.from(t.expirationTimestamp).toNumber(),status:r}}async isStillValidOffer(t){if(i.O$.from(Math.floor(Date.now()/1e3)).gt(t.endTimeInSeconds))return{valid:!1,error:"Offer with ID ".concat(t.id," has expired")};let r=await this.contractWrapper.getChainID(),a=(0,p.i)(t.currencyContractAddress)?m.aW[r].wrapped.address:t.currencyContractAddress,n=this.contractWrapper.getProvider(),o=(await Promise.resolve().then(e.t.bind(e,54497,19))).default,s=new m.cs(n,a,o,{},this.storage);return(await s.read("balanceOf",[t.offerorAddress])).lt(t.totalPrice)?{valid:!1,error:"Offeror ".concat(t.offerorAddress," doesn't have enough balance of token ").concat(a)}:(await s.read("allowance",[t.offerorAddress,this.getAddress()])).lt(t.totalPrice)?{valid:!1,error:"Offeror ".concat(t.offerorAddress," hasn't approved enough amount of token ").concat(a)}:{valid:!0,error:""}}async applyFilter(t,r){let e=[...t];if(r){if(r.offeror){let t=await (0,m.aL)(r.offeror);e=e.filter(r=>r.offeror.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}if(r.tokenContract){let t=await (0,m.aL)(r.tokenContract);e=e.filter(r=>r.assetContract.toString().toLowerCase()===(null==t?void 0:t.toString().toLowerCase()))}void 0!==r.tokenId&&(e=e.filter(t=>{var e;return t.tokenId.toString()===(null==r?void 0:null===(e=r.tokenId)||void 0===e?void 0:e.toString())}))}return(null==r?void 0:r.count)&&r.count<e.length?e.slice(0,r.count):e}constructor(t,r){this.featureName=m.dC.name,this.makeOffer=(0,g.f)(async t=>{let r=await k.parseAsync(t),e=await this.contractWrapper.getChainID(),a=(0,p.i)(r.currencyContractAddress)?m.aW[e].wrapped.address:r.currencyContractAddress,i=await (0,l.n)(this.contractWrapper.getProvider(),r.totalPrice,a),n=await this.contractWrapper.getCallOverrides();return await (0,u.s)(this.contractWrapper,i,a,n),g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"makeOffer",args:[{assetContract:r.assetContractAddress,tokenId:r.tokenId,quantity:r.quantity,currency:a,totalPrice:i,expirationTimestamp:r.endTimestamp}],parse:t=>({id:this.contractWrapper.parseLogs("NewOffer",null==t?void 0:t.logs)[0].args.offerId,receipt:t})})}),this.cancelOffer=(0,g.f)(async t=>g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"cancelOffer",args:[t]})),this.acceptOffer=(0,g.f)(async t=>{let r=await this.validateOffer(i.O$.from(t)),{valid:e,error:a}=await this.isStillValidOffer(r);if(!e)throw Error("Offer ".concat(t," is no longer valid. ").concat(a));let n=await this.contractWrapper.getCallOverrides()||{};return await (0,f.h)(this.contractWrapper,this.getAddress(),r.assetContractAddress,r.tokenId,await this.contractWrapper.getSignerAddress()),g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"acceptOffer",args:[t],overrides:n})}),this.contractWrapper=t,this.storage=r,this.events=new A.a(this.contractWrapper),this.encoder=new p.C(this.contractWrapper),this.interceptor=new C.C(this.contractWrapper),this.estimator=new A.G(this.contractWrapper)}}}}]);